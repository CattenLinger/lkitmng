#!/usr/bin/env lua

--------------------------------------------------------------------------------------------------------------------------------
-- Bootstrap
--------------------------------------------------------------------------------------------------------------------------------

---@type string @os type, unix(linux) or nt
os.type = (function()
	if package.path:find('/', 1, true) == 1 then return 'unix' else return 'nt' end
end)()

-- currenly lkitmgr only support unix/linux
if os.type ~= 'unix' then io.stderr:write("lkitmgr only support unix currenly. \n"); os.exit(1); end

-- END BOOTSTRAP


--------------------------------------------------------------------------------------------------------------------------------
string = string do -- Minimal string lib
--------------------------------------------------------------------------------------------------------------------------------

--- Just use + to concating strings. + never confusing the code, trust us.
---
---@param self string 
---@param another any
getmetatable("").__add = function(self, another) return self .. tostring(another) end

--- format string, same as string.format
function fstring(...) return string.format(...) end

end -- END STRING

--------------------------------------------------------------------------------------------------------------------------------
table = table do -- Minimal Table lib
--------------------------------------------------------------------------------------------------------------------------------
local protected_table_error = function() error("protected table") end

--- dump table content to target, if no target presented, use an empty table
---@param source table @source table
---@param target? table @target table, empty raw table if not presented
---@return table
table.dump = function(source, target)
	local target = target or {}
	for k, v in pairs(source) do target[k] = v end
	return target
end

--- protect a table.
---@param tb table @target table
---@param mt? table @optional metatable template
table.protect = function(tb, mt)
	local new_mt = {}
	if mt then table.dump(mt, new_mt) end
	new_mt.__newindex = protected_table_error
	if not new_mt.__metatable then new_mt.__metatable = false end
	return setmetatable(tb, new_mt)
end

---@type table @a protected empty table
table.empty = (function()
	local empty = {}
	empty.__metatable = empty
	return table.protect(empty, { __metatable = empty })
end)()

end

--- Swap keys' and values' role, return a new array
---@param tb table
---@return table
table.number_values_as_key = function(tb)
	local result = {}
	for value, key in pairs(tb) do table.insert(result, key, value) end
	return array(result)
end

local __default_sort_comparator = function(a, b) return a[1] < b[1] end
table.sort_by_value = function(tb, comparator)
	local comparator = comparator or __default_sort_comparator
	local result = array {}
	for key, value in pairs(tb) do result:insert({ value, key }) end
	result:sort(comparator)
	return result:map(function(v) return v[2] end)
end

--- wrap a raw table, return the wrapped table
---@param tb table
---@return table
table.wrap = function(tb) return setmetatable(tb, { __index = table }) end

--- Select table entry with a filter, returns a new table
--- Filter function gives two value, the first is a value, the second is the key
---@param table table
---@param filter function
table.filter = function(table, filter)
	local result = {}
	for key, value in pairs(table) do 
		if filter(value, key) then result[key] = value end
	end
	return result
end

table.map = function(tb, mapper)
	local result = array {}
	for key, value in pairs(tb) do
		result:insert(mapper(value, key))
	end
	return result
end

local __default_join_to_string_converter = function(value) return tostring(value) end
table.join_to_string = function(tb, separator, converter)
	local result = ""
	local count = 1
	local separator = separator or ""
	local converter = converter or __default_join_to_string_converter
	for key, value in pairs(tb) do
		local converted = converter(value, key, count)
		if count > 1 then
			result = result + separator + converted 
		else
			result = result + converted
		end
		count = count + 1
	end
	return result
end

--- calculate elements of this table
---@param tb table
table.size = function(tb)
	local count = 0
	for _ in pairs(tb) do count = count + 1; end
	return count
end

local fn_table_protected = function() error("protected table") end
table.shadow_of = function (tb, template)
	local result = template or {}
	result.__index     = tb
	result.__newindex  = fn_table_protected
	result.__metatable = tb
	return result
end

-- shadow table of table
local table_shadow = table.shadow_of(table, {
	__call = function(self, table) return self.wrap(table) end
})

-- lock the acient table
table = setmetatable({}, table_shadow)

--- END TABLE BASE

--- Array base
--- Define array base class
array = setmetatable({}, { __index = table })

--- Reverse this array in place, return the origin table reference
---@param arr table
---@return table
array.reverse_in_place = function(arr)
	local n = #arr
	local m = n / 2
	for i = 1, m do arr[i], arr[n - i + 1] = arr[n - i + 1], arr[i] end
	return arr
end

array.reversed = function(arr)
	local result = array { }
	for i=#arr, 1, -1 do result[#result + 1] = arr[i] end
	return result
end

--- Wrap a table as operatable array
---@param arr table
---@return table
array.wrap = function(arr)
	return setmetatable(arr, { __index = array })
end

--- Select array content with a filter, returns a new array
--- Filter function gives two value, the first is a value, the second is the index
---@param arr table
---@param filter function
array.filter = function(arr, filter)
	local result = array { }
	for index, value in ipairs(arr) do 
		if filter(value, index) then result:insert(value) end
	end
	return result
end

-- shadow table for other array instance
local array_shadow = table.shadow_of(array, {
	__tostring = function(self) return "array" end,
	__call     = function(self, array) return self.wrap(array) end
})

-- lock the array table
array = setmetatable({}, array_shadow)

-- END ARRAY BASE

--
-- OS utils
--

os.require_command = function(name, msg)
	local template = "command -v '%s' 2>&1 > /dev/null"
	local success = os.execute(template:format(name)) or false
	if not success then error(msg or "Require command '"..name.."'"); end
end

os.basename = function()
	local template = "basename $(which '%s')"
	local handle = io.popen(template:format(arg[0]))
	local basename = handle:read()
	handle:close()
	return basename
end

os.executable = function()
	local template = "which '%s'"
	local handle = io.popen(template:format(arg[0]))
	local name = handle:read()
	handle:close()
	return name
end

local function __string_output(...)
	local args = table.pack(...)
	if not args then return end
	local length = #args
	if length == 1 then return args[1] end
	return args[1]:format(table.unpack(args, 2))
end
--- put content to stdout
---@param str string
function stdout(...) io.stdout:write(__string_output(...)) end

--- put content to stderr
---@param str string
function stderr(...) io.stderr:write(__string_output(...)) end

function dbglog(...)
	if not __verbose__ then return end
	stderr("[ DEBUG ] " + __string_output(...))
end

--
-- FileSystem Utils
--

--- The filesystem base object
fs = {}

--- check if directory exists or is a directory
---@param path string
---@return boolean
fs.is_directory_exists = function(path)
	local success = os.execute("test -d '" + path + "'")
	return success or false
end

--- check if file exists or is a file
---@param path string
---@return boolean
fs.is_file_exists = function(path)
	local success = os.execute("test -f '" + path + "'")
	return success or false
end

fs.work_dir = (function ()
	local handle = io.popen("pwd")
	local path = handle:read()
	local success = handle:close()
	if not success then error("Could not get current directory!\n"); end
	return path
end)()

fs.list_file = function(path)
	local handle = io.popen("ls -1 '"..path.."'")
	local list={}
	for line in handle:lines() do
		table.insert(list,line)
	end
	local success = handle:close() or false
	return list, success
end

function fs:init_temp_dir()
	local location = "/tmp/.." os.tempname()
	local success = os.execute("mkdir -p '"..location.."'")
	if not success then error("Could not create temp directory '"..location.."'") end
	self.temp_location = location
	return location
end

function fs:destroy_temp_dir()
	local location = self.temp_location
	if not location then error("Temp directory is not initialized!") end
	local success = os.execute("rm -rf '" .. location .. "'")
	if not success then error("Cannot delete temp directory '"..location.."'") end
end

--
-- Setting up
--

--- service storage
local service_private  = { lib_dir  = fs.work_dir + "/lib", conf_dir = fs.work_dir + "/conf.d" }

service_private.provider = function(self, name)
	local provider = registry.providers[name]
	if not provider then return nil end
	if type(provider) ~= 'function' then error("'" + name + "' is not a provider!") end
	return provider
end

local service_shadow = table.shadow_of(service_private)
service = setmetatable({}, service_shadow)

--- feature function storage
local features_private = {}
local features_shadow  = table.shadow_of(features_private)
features = setmetatable({}, features_shadow)

--- feature data storage
local stores_private = {}
local stores_shadow  = table.shadow_of(stores_private)
stores = setmetatable({}, stores_shadow)

--- public registry
local registry_private = {
	dsl_context = {
		ipairs = iparis,
		next = next,
		pairs = pairs,
		rawequals = rawequals,
		rawget = rawget,
		rawset = rawset,
		select = select,
		tonumber = tonumber,
		type = type,
		unpack = table.unpack,
		pack = table.pack,
		string = string,
		table = table,
		math = math,
		os = {
			date = os.date,
			difftime = os.difftime,
			time = os.time,
		},
		print = print,
		array = array
	}
}
local dsl_context_shadow = { __index = registry_private.dsl_context, __metatable = registry_private.dsl_context }
registry_private.dsl_result = setmetatable({}, dsl_context_shadow)

local providers_private = {}
providers_private.register = function(_, name, func)
	if type(func) ~= 'function' then error("Registry provider should be a function, not '" + type(func) + "'") end
	providers_private[name] = func
	return func
end
local providers_shadow = table.shadow_of(providers_private)
registry_private.providers = setmetatable({}, providers_shadow)

local registry_shadow = table.shadow_of(registry_private)
registry = setmetatable({}, registry_shadow)

service_private.reload_configuration_file = function(self)
	local conf_dir = self.conf_dir
	if not fs.is_directory_exists(conf_dir) then
		stderr("Configuration directory '" + confDir + "' does not exists.")
		stderr("Please create one and write some configuration in it.")
		return
	end

	local handle = io.popen("ls -1 '" + conf_dir + "' | grep -E '^.+?\\.lua$'")
	local conf_file_list = {}
	for line in handle:lines() do table.insert(conf_file_list, line) end

	if #conf_file_list <= 0 then
		stderr("No configuration present.")
		stderr("Write some configuration in " + conf_dir + " with suffix '.lua'")
		return
	end

	for _, filename in ipairs(conf_file_list) do
		local file = io.open(conf_dir + "/" + filename)
		local content = file:read("*a")
						file:close()

		local dsl_context = setmetatable({}, dsl_context_shadow)
		local block, err = load(content, filename + " <config>", 't', dsl_context)
		if not block then error("Failed to load configuration. Reason: " + tostring(err)) end
		local success, error = pcall(block)
		if not success then 
			stderr("Failed to evaluate configuration '%s'\nReason: %s\n", filename, tostring(error)); 
			os.exit(1)
		end
		registry_private.dsl_result = dsl_context
	end
end

-- Load lib dir 
if fs.is_directory_exists(service_private.lib_dir) then package.path = package.path + service_private.lib_dir end

local function use_feature(name)
	-- did loaded, no action
	if features[name] or stores[name] then return end
	local lib_dir = service.lib_dir;

	if not fs.is_directory_exists(lib_dir) then error("Library path '" + lib_dir + "' does not exists!") end
	local path = lib_dir + "/" + name + ".lib.lua"
	if not fs.is_file_exists(path) then error("Unknown feature '" + name + "'"); end

	local file = io.open(path)
	local block, err = load(file:read("*a"), name + " <feature>", 't', _ENV)
	                   file:close()

	if not block then error(tostring(err)) end
	local result = block()

	-- load feature entry if present
	local entry = result.entry
	if entry then
		if type(entry) ~= 'function' then error("Feature of '" + name + "' did not return function type!") end
		features_private[name] = entry
	end

	-- load feature store if present
	local store = result.store
	if store then
		if type(store) ~= 'table' then error("Store of '" + name + "' did not return table type!") end
		stores_private[name] = store
	end
end

local function all_features()
	local list={}
	local handle = io.popen("ls -1 '" + service_private.lib_dir + "' 2>/dev/null | grep -E '^.+?\\.lib\\.lua$' | sed -E 's/(.+?)\\.lib\\.lua$/\\1/'")
	for line in handle:lines() do 
		if line ~= "" then table.insert(list, line) end 
	end
	handle:close()
	return list
end

local function print_help()
	print "Service Entry"
	print "Usage: service [feature name] <args...> "
	stdout("Available features:")
	local featureList = all_features()
	if #featureList <= 0 then
		print " (No available commands)"
	else
		for _,command in ipairs(featureList) do stdout(" " + command) end
		print ""
	end
	print ""
	print_information()
end

local function print_information()
	print "-- Information --------"
	print("     Entry : " + os.basename())
	print("Executable : " + os.executable())
	print("   Lib Dir : " + service.lib_dir)
	print("Config Dir : " + service.conf_dir)
end

local function main(args)
	if #args <= 0 then print_help(); os.exit(0); end
	local feature = args[1]
	for _, argv in ipairs(args) do 
		if (argv == '-v' or argv == '--verbose') then __verbose__ = true end 
	end
	if feature == "--help" or feature == "-h" then printHelp(); os.exit(1) end
	if feature == "--info" or feature == "-i" then printInformation(); os.exit(1) end

	for _, name in ipairs(all_features()) do use_feature(name) end
	local entry = features[feature]
	if entry then 
		service:reload_configuration_file()
		entry(table.unpack(args, 2)) 
	else
		stdout("[i] This feature has no command \n")
	end
end

local _, error = pcall(main, arg)
if fs.temp_location then fs:destroy_temp_dir() end
if error then stderr("Error: " + error + "\n"); os.exit(1); end
